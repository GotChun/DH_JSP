/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.96
 * Generated at: 2024-10-24 03:02:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.C09;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import C09.*;

public final class OracleDBCURD_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	String url="jdbc:oracle:thin:@localhost:1521:xe";
	String id="system";
	String pw="1234";
	
	Connection conn=null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	
	// CRUD 함수 미리 만들기
	void connection() throws Exception{   //throws 안할거면 에러 페이지 따로 빼야함
		//Driver적재
		Class.forName("oracle.jdbc.driver.OracleDriver");
	conn=DriverManager.getConnection(url,id,pw);
	System.out.println("connected.."+ conn);
		//connection 객체 생성 + 연결
	}
	void insert(String userid,String password,String username) throws Exception{  //throws 로 던져도 되긴하는데 try catch 를 하는게 더 안전한 방법.
		//db 삽입
		pstmt = conn.prepareStatement("insert into tbl_test values(?,?,?)");
		pstmt.setString(1, userid);
		pstmt.setString(2, password);
		pstmt.setString(3, username);
			
		int result = pstmt.executeUpdate();
		pstmt.close();
	
			
	}
	
	List<TestDto> select() throws Exception{
		pstmt=conn.prepareStatement("select * from tbl_test");
		rs = pstmt.executeQuery();
		List<TestDto> list = new ArrayList();
		TestDto dto=null;
		if(rs!=null){
			
			while(rs.next()){
				dto = new TestDto();
				dto.setUserid(rs.getString("userid"));
				dto.setPassword(rs.getString("password"));
				dto.setUsername(rs.getString("username"));
				list.add(dto);
			}
		}
		rs.close();
		pstmt.close();
		
		return list;
	}
	


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(8);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("C09");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");

//DB 연결
connection();
	//insert("user1","1234","길동좌");
	//insert("user2","1234","동동좌");
	//insert("user3","1234","서동좌");
	//insert("user4","1234","야동좌");
	
	//select
	List<TestDto> list = select();
	list.forEach(item->System.out.println(item));

      out.write(" \r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("header{height:100px;border:1px solid;}\r\n");
      out.write("main{min-height:800px;border:1px solid;}\r\n");
      out.write("footer{height:300px;border:1px solid;}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<div class =\"wrapper\">\r\n");
      out.write("		<header>\r\n");
      out.write("		<main>\r\n");
      out.write("		\r\n");
      out.write("		<table style=\"width:800px;margin:200px auto;border:1px solid;\">\r\n");
      out.write("			<caption>조회결과확인</caption>\r\n");
      out.write("			<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("			<td>No</td>\r\n");
      out.write("			<td>계정</td>\r\n");
      out.write("			<td>비밀번호</td>\r\n");
      out.write("			<td>이름</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			</thead>\r\n");
      out.write("			\r\n");
      out.write("			<tbody>\r\n");
      out.write("			");

			for(int i =0;i<list.size();i++){  // list 개수만큼 반복, 
				
				
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>");
      out.print(i+1 );
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print( list.get(i).getUserid());
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print( list.get(i).getPassword());
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print( list.get(i).getUsername());
      out.write("</td>\r\n");
      out.write("				\r\n");
      out.write("				");

			}
			
      out.write("\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			</tbody>\r\n");
      out.write("			<!-- 반복처리 -->\r\n");
      out.write("		</table>\r\n");
      out.write("		\r\n");
      out.write("		</main>\r\n");
      out.write("		</header>\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		<footer>\r\n");
      out.write("		\r\n");
      out.write("		</footer>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
